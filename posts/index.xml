<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CyberBored Blog</title>
    <link>https://mchoumar.github.io/CyberBored.github.io/posts/</link>
    <description>Recent content in Posts on CyberBored Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Aug 2023 22:33:51 +0200</lastBuildDate><atom:link href="https://mchoumar.github.io/CyberBored.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Devil Machine</title>
      <link>https://mchoumar.github.io/CyberBored.github.io/posts/htb/devil/</link>
      <pubDate>Thu, 17 Aug 2023 22:33:51 +0200</pubDate>
      
      <guid>https://mchoumar.github.io/CyberBored.github.io/posts/htb/devil/</guid>
      <description>My personal walk through: I started today with my first ever machine after the starting point training. I first connected to the htb openvpn service and started searching the ports and versions of the port using nmap:
After that, I accessed the ftp open port and tried downloading and uploading some files using get and put, which allowed me to learn that I am on root privilege. Then, I started searching and learning about BurpSuit Reference which I used to intercept the websites requests.</description>
      <content>&lt;h1 id=&#34;my-personal-walk-through&#34;&gt;My personal walk through:&lt;/h1&gt;
&lt;p&gt;I started today with my first ever machine after the starting point training. I first connected to the htb openvpn service and started searching the ports and versions of the port using nmap:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/htb/pic0.png&#34; alt=&#34;Shell&#34;&gt;&lt;/p&gt;
&lt;p&gt;After that, I accessed the ftp open port and tried downloading and uploading some files using get and put, which allowed me to learn that I am on root privilege. Then, I started searching and learning about BurpSuit Reference which I used to intercept the websites requests. I learned then that the website version is Microsoft IIS httpd 7.5, which after doing a little research I learned that it uses aspx file extension.&lt;/p&gt;
&lt;p&gt;Then, after gathering all that information I searched msfvenom for windows payloads to make a payload in the aspx extention and uploaded it to the server using ftp put command and used msfconsole to lesson for sessions using the multihandler.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/htb/pic1.png&#34; alt=&#34;Shell&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/htb/pic2.png&#34; alt=&#34;Shell&#34;&gt;&lt;/p&gt;
&lt;p&gt;I faced an issue, where the msfconsole wasn&amp;rsquo;t able to connect and the two reasons why are 1- I was using windows/x64/meterpreter/reverse_tcp instead of windows/meterpreter/reverse_tcp and 2-I forgot to set the payload in msfconsole, but now it works fine&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/htb/pic3.png&#34; alt=&#34;Shell&#34;&gt;&lt;/p&gt;
&lt;p&gt;After getting access, I typed the command sysinfo to check for the architecture of the machine and after that shell followed with systeminfo to check to learn about the hotfixes installed which
turned out to be never updated&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/htb/pic4.png&#34; alt=&#34;Shell&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/htb/pic5.png&#34; alt=&#34;Shell&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then using the command background, I set the session to keep running in the background and then searched for suggester, which is used to suggest exploits for a specific machine then set my session and run the suggester, which gave me multiple exploits to use, so
I picked the first option and setup all required options&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/htb/pic6.png&#34; alt=&#34;Shell&#34;&gt;&lt;/p&gt;
&lt;p&gt;And finally, I had privilege escalated to root user and navigated from windows file to users file and got the flags using type command to display the flag on the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/htb/pic7.png&#34; alt=&#34;Shell&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Nmap</title>
      <link>https://mchoumar.github.io/CyberBored.github.io/posts/nmap/</link>
      <pubDate>Tue, 15 Aug 2023 14:43:22 +0200</pubDate>
      
      <guid>https://mchoumar.github.io/CyberBored.github.io/posts/nmap/</guid>
      <description>Today I am starting Nmap project, testing and playing around scanning devices.
First, there are 65535 open ports available on any network-enabled computer, and 1024 of them are well-known.
Key flags to keep in mind:
Flags Description -sS Half-open or stealth scan, which has similar function to TCP scan. Key difference between the two scan is that TCP scan performs. -sT TCP connect scans, which performs 3-way handshake. -sU UDP connect scans, which doesn&amp;rsquo;t rely on the handshake.</description>
      <content>&lt;p&gt;Today I am starting Nmap project, testing and playing around scanning devices.&lt;/p&gt;
&lt;p&gt;First, there are 65535 open ports available on any network-enabled computer, and 1024 of them are well-known.&lt;/p&gt;
&lt;p&gt;Key flags to keep in mind:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flags&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-sS&lt;/td&gt;
&lt;td&gt;Half-open or stealth scan, which has similar function to TCP scan. Key difference between the two scan is that TCP scan performs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-sT&lt;/td&gt;
&lt;td&gt;TCP connect scans, which performs 3-way handshake.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-sU&lt;/td&gt;
&lt;td&gt;UDP connect scans, which doesn&amp;rsquo;t rely on the handshake.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-sN&lt;/td&gt;
&lt;td&gt;NULL scans, TCP request is sent with no flag set at all, and receives RST if port is closed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-sX&lt;/td&gt;
&lt;td&gt;Xmas scans, sends malformed TCP packet and expects RST response for closed ports. It is called Xmas, as it sends(PSH, URG and FIN) which give it the appearance of a blinking Christmas tree.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-sF&lt;/td&gt;
&lt;td&gt;FIN scans, similar to the NULL scan, but sends with a FIN flag.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-O&lt;/td&gt;
&lt;td&gt;Detects which operating system the target is running.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-sV&lt;/td&gt;
&lt;td&gt;Detects the version of the services running on the target.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-v, vv, vvv&lt;/td&gt;
&lt;td&gt;Verbosity is used to scan with in depth details.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-oA&lt;/td&gt;
&lt;td&gt;Outputs Nmap results in three major formats.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-oN&lt;/td&gt;
&lt;td&gt;Saves Nmap results in normal format.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-oG&lt;/td&gt;
&lt;td&gt;Saves Nmap results in gerpable format.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-A&lt;/td&gt;
&lt;td&gt;Aggressive mode, which activates service detection, operating system, traceroute, and script scanning.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-T1-5&lt;/td&gt;
&lt;td&gt;Timer template from level 1-5.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;Port scan, can be used to specify the ports to be scanned.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-p-&lt;/td&gt;
&lt;td&gt;All ports scan, as the name suggest it scans all open ports.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;script&lt;/td&gt;
&lt;td&gt;Activates Nmap scripts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-sn&lt;/td&gt;
&lt;td&gt;Ping sweep, depends on ICMP message, which is sent to all specified IP addresses.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-Pn&lt;/td&gt;
&lt;td&gt;Tells Nmap to scan without pinging the target in other words Nmap assumes that the target is alive.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-f&lt;/td&gt;
&lt;td&gt;Used to fragment the packets.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;mtu &lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;td&gt;Similar to the use of fragmented packet, but allows you to control the size of the packet.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;scan-delay &lt;!-- raw HTML omitted --&gt;ms&lt;/td&gt;
&lt;td&gt;Used to add a delay between packets sent.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;badsum&lt;/td&gt;
&lt;td&gt;Used to generate in invalid checksum for packets. However, firewalls might respond automatically, without bothering to check the checksum of the packet. Which allows this flag to check the presence of firewall/IDS.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Nmap Scripting Engine (NSE) is an incredibly powerful addition to Nmap, extending its functionality quite considerably. NSE Scripts are written in the Lua programming language, and can be used to do a variety of things:
from scanning for vulnerabilities, to automating exploits for them. The NSE is particularly useful for reconnaissance, however, it is well worth bearing in mind how extensive the script library is.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;• safe: Won&#39;t affect the target
• intrusive: Not safe: likely to affect the target
• vuln: Scan for vulnerabilities
• exploit: Attempt to exploit a vulnerability
• auth: Attempt to bypass authentication for running services (e.g. Log into an FTP server anonymously)
• brute: Attempt to brute force credentials for running services
• discovery: Attempt to query running services for further information about the network (e.g. query an SNMP server).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example: &amp;ndash;script=&lt;!-- raw HTML omitted --&gt; or &amp;ndash;script=vuln.
Multiple scripts can be run at the same time using the following command: &amp;lt;&amp;ndash;script=smb-enum-users,smb-enum-shares&amp;gt;.&lt;/p&gt;
&lt;p&gt;Some scripts requires arguments to run, like credentials, if they&amp;rsquo;re exploiting an authenticated vulnerability. Which can be done using &amp;ndash;script-args Nmap switch.
Example, nmap -p 80 &amp;ndash;script http-put &amp;ndash;script-args http-put.url=&amp;rsquo;/dav/shell.php&amp;rsquo;,http-put.file&amp;rsquo;./shell.php&#39;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that the arguments are separated by commas, and connected to the
corresponding script with periods &lt;!-- raw HTML omitted --&gt;.&lt;!-- raw HTML omitted --&gt;.
For extra help regarding scripts, you can type the following command nmap &amp;ndash;script-help &lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;Nmap has a formatted text file containing filenames and categories for each available script, which we can search for and find in the following directory: /usr/share/nmap/scripts/script.db. There are two ways to search for scripts in the Nmap script.db, either grep &amp;ldquo;gtp&amp;rdquo; /usr/share/nmap/scripts/script.db or ls -l /usr/share/nmap/scripts/&lt;em&gt;ftp&lt;/em&gt;.
The following reference is to search for all nmap scripts and libraries: &lt;a href=&#34;https://nmap.org/nsedoc/&#34;&gt;https://nmap.org/nsedoc/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ways to install/update script list:
1-sudo apt update &amp;amp;&amp;amp; sudo apt install nmap
2-sudo wget -O /usr/share/nmap/scripts/&lt;!-- raw HTML omitted --&gt;.nse https:/svb.nmap.org/nmap/scripts/&lt;!-- raw HTML omitted --&gt;.nse follow by nmap &amp;ndash;script-updatedb.&lt;/p&gt;
&lt;h1 id=&#34;practical-lab&#34;&gt;Practical Lab:&lt;/h1&gt;
&lt;p&gt;First, I pinged the target using ping -c 5 10.10.239.246 to check if the target responds with an ICMP message, after using ping -h to check all available flags. -c flag is used to stop pinging the target after a certain number of replied, which in that case I chose 5.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/nmap/pic0.png&#34; alt=&#34;Xmas scan&#34;&gt;&lt;/p&gt;
&lt;p&gt;And according to the results shown, the target didn&amp;rsquo;t even receive the packets. Next, I checked if the
first 999 ports are open/filtered using Xmas scan and specifying the number of ports to be scanned using -p.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/nmap/pic1.png&#34; alt=&#34;TCP scan&#34;&gt;&lt;/p&gt;
&lt;p&gt;Which showed the ports to be open, but in ignored state. Then, I noticed that I was facing issue with my openvpn, which was resolved by regenerating a new openvpn file configuration on TryHackMe. Next, I rerun the nmap scans again to check the open ports using TCP scan, which revealed 5 open ports:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/nmap/pic2.png&#34; alt=&#34;Script&#34;&gt;&lt;/p&gt;
&lt;p&gt;For the final part, I used nmap &amp;ndash;script to check port 21 FTP and check if I can possible use it to login into the target, and then logged in using anonymous username.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/nmap/pic3.png&#34; alt=&#34;result&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/nmap/pic4.png&#34; alt=&#34;login&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/nmap/pic5.png&#34; alt=&#34;login&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Bash Shell Scripting</title>
      <link>https://mchoumar.github.io/CyberBored.github.io/posts/bashscript/</link>
      <pubDate>Thu, 10 Aug 2023 04:32:52 +0200</pubDate>
      
      <guid>https://mchoumar.github.io/CyberBored.github.io/posts/bashscript/</guid>
      <description>Introduction: I started by checking out what shell is running in our terminal using echo $SHELL.
Then using the command ls I listed the available files and directories in our working directory, and after that I listed the long format of the directories and files including the hidden ones using -la. After checking the current data available using ls, I typed pwd to check my current working directory. Next using cd / I navigated to the root directory which is located at the top of all directories, which contains sensitive files.</description>
      <content>&lt;h1 id=&#34;introduction&#34;&gt;Introduction:&lt;/h1&gt;
&lt;p&gt;I started by checking out what shell is running in our terminal using echo $SHELL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/bash/pic0.png&#34; alt=&#34;Shell&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then using the command &lt;strong&gt;ls&lt;/strong&gt; I listed the available files and directories in our working directory, and after that I listed the long format of the directories and files including the hidden ones using &lt;strong&gt;-la&lt;/strong&gt;.
After checking the current data available using ls, I typed &lt;strong&gt;pwd&lt;/strong&gt; to check my current working directory. Next using &lt;strong&gt;cd /&lt;/strong&gt; I navigated to the root directory which is located at the top of all directories, which contains sensitive files.&lt;/p&gt;
&lt;h1 id=&#34;manipulating-files&#34;&gt;Manipulating files:&lt;/h1&gt;
&lt;p&gt;I used &lt;strong&gt;touch&lt;/strong&gt; command to create a file name myBashScript then used &lt;strong&gt;ls -l myBashScript&lt;/strong&gt; to list my new file and check that it was created successfully, I decided next that I would like to change the name of the file using the command &lt;strong&gt;mv myBashScript muchBetterName&lt;/strong&gt;. Finally, I removed the file using rm muchBetterName.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/bash/pic1.png&#34; alt=&#34;Commands&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next, I tried cat command which stands for concatenate, to list the contents of a file and redirect the contents into another file. First, I made a file called myNewFile.txt and using the command &lt;strong&gt;echo &amp;ldquo;Hello World&amp;rdquo; &amp;gt; myNewFile.txt&lt;/strong&gt; to output the phrase hello world into the file, then &lt;strong&gt;cat myNewFile.txt&lt;/strong&gt; to output the content on the screen. Next, I used the command &lt;strong&gt;cat myNewFile.txt &amp;gt; test.txt&lt;/strong&gt; and finally displayed it using cat.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/bash/pic2.png&#34; alt=&#34;Commands1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Using more and less you can view all the content of the file or portion of them. I used nano to edit the contents of the files I created.&lt;/p&gt;
&lt;h1 id=&#34;finding-information&#34;&gt;Finding Information:&lt;/h1&gt;
&lt;p&gt;I tried creating a new directory using mkdir and moved it to a new directory called backups and created two new files into it, then we deleted the whole file using rm -r backups because rmdir only deletes empty directories.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/bash/pic3.png&#34; alt=&#34;create&#34;&gt;&lt;/p&gt;
&lt;p&gt;I tried to find a directory using find command, which displayed a bunch of errors then tried it again but I added 2&amp;gt;dev/null which outputs all the errors into the file called null. By using * to be able to get all files and directories that has backup in their names.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/bash/pic4.png&#34; alt=&#34;find&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next I tried the grep command to find specific files that contains regular expressions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/bash/pic5.png&#34; alt=&#34;grep&#34;&gt;&lt;/p&gt;
&lt;p&gt;I learned that using &lt;strong&gt;!ls&lt;/strong&gt; I can access the content since last time I used ls. Using &lt;strong&gt;history&lt;/strong&gt; I can check the history of all commands I used in my CLI and &lt;strong&gt;man&lt;/strong&gt; is used to check the manual of a specific command.&lt;/p&gt;
&lt;h1 id=&#34;aliases&#34;&gt;Aliases:&lt;/h1&gt;
&lt;p&gt;Alias is a shortcut we can use to access a command that is frequently used, for example, &lt;strong&gt;ll&lt;/strong&gt; which is an alias for the command ls &lt;strong&gt;-alF&lt;/strong&gt;, we can check what an alias is for by typing &lt;strong&gt;alias ll&lt;/strong&gt;. We can create aliases by going to the file called &lt;strong&gt;.bash_aliases&lt;/strong&gt; which is checked when the shell is first lunched and checks the &lt;strong&gt;.bashrc&lt;/strong&gt; file. To create the aliase, we should run the following into the &lt;strong&gt;.bash_aliases&lt;/strong&gt; file:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/bash/pic6.png&#34; alt=&#34;alias&#34;&gt;&lt;/p&gt;
&lt;p&gt;And replace the command that is after fbackup with the command you want to create an aliase for, and replace fbackup with the name that you desire for the alias command.
Note: When you first create an alias the shell won&amp;rsquo;t recognize it, since it only looks into the file once when it is first lunched, to make it look into the file and recognize the new alias we can type &lt;strong&gt;source .bash_aliases&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;writing-a-shell-script&#34;&gt;Writing a Shell Script:&lt;/h1&gt;
&lt;p&gt;I started writing my first bash script. First, I created a file using nano and then using #!/bin/bash also known as the Shebang which specifies that the shell type is bash. Next, I wrote a comment to specify what this script is for so that in the future I can understand what it is made for. Then I set up variables and stored directory path into them. After that, to make sure that the file names aren&amp;rsquo;t the same, I assigned a variable that stores the date and I used back tick to let the shell know that it should execute the command that is inside of the back ticks, file name, and the file extension type, then combined them into a variable called FILE_NAME. After the script was create, I changed the file user permission using chmod to be able to execute the script.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/bash/pic7.png&#34; alt=&#34;bash script&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/bash/pic8.png&#34; alt=&#34;script output&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then I added tar to my script, which stands for tape archive and is used to create Archive and extract the Archive files. Using the command bellow allowed me to create and extracted the archived file using the following flags:
&lt;strong&gt;-c&lt;/strong&gt; which creates an archive by bundling files and directories together.
&lt;strong&gt;-f&lt;/strong&gt; Specifies the filename of the archive to be created or extracted.
&lt;strong&gt;-z&lt;/strong&gt; Uses gzip compression when creating a tar file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/bash/pic9.png&#34; alt=&#34;zip file&#34;&gt;&lt;/p&gt;
&lt;p&gt;Reference used: &lt;a href=&#34;https://www.geeksforgeeks.org/tar-command-linux-examples/&#34;&gt;https://www.geeksforgeeks.org/tar-command-linux-examples/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;bash-scripting-and-creating-a-cron-job-with-crontab&#34;&gt;Bash Scripting and Creating a Cron Job With Crontab:&lt;/h1&gt;
&lt;p&gt;Final step, I started by creating an if else statement to check if the script is working and sends it to the specified email using the mail command else it will output that at that date something went wrong into the error.log file. Then, I used &lt;strong&gt;crontab -e&lt;/strong&gt; to automate the process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/bash/pic10.png&#34; alt=&#34;extra code&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/bash/pic11.png&#34; alt=&#34;crontab&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
